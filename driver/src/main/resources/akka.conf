akka {
  # Control log level to the console on standard out
  stdout-loglevel = "ERROR"
  #stdout-loglevel = "OFF"

  # Control log level to log files
  loglevel = "DEBUG"

  # Specify which logger to use. Defer to Slf4J
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Use the backend (e.g. logback) definition of events to filter them
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  # Controls how many dead letter messages are logged
  log-dead-letters = 10

  # Controls whether dead letters are logged during shutdown of actor system
  log-dead-letters-during-shutdown = off

  actor {
    debug {
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill etc.)
      autoreceive = off
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = off
      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = off
      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = off
      # enable WARN logging of misconfigured routers
      router-misconfiguration = off
    }

    # What kind of ExecutionService to use
    executor = "fork-join-executor"

    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 1

      # The parallelism factor is used to determine thread pool size using the
      # following formula: ceil(available processors * factor). Resulting size
      # is then bounded by the parallelism-min and parallelism-max values.
      parallelism-factor = 1.0

      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 64
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 100
  }

  io {
    tcp {
      # nr-of-selectors = 10
      # batch-accept-limit
      # direct-buffer-size
      # direct-buffer-pool-limit
      # register-timeout = 5000
      # max-received-message-size
      # received-message-size-limit
      # management-dispatcher
      # file-io-dispatcher
      # file-io-transferTo-limit
      # finish-connect-retries
      # windows-connection-abort-workaround-enabled

      # max-channels
      # selector-association-retries
      # selector-dispatcher
      # worker-dispatcher
      trace-logging = off
    }
  }

  # Used to set the behavior of the scheduler.
  # Changing the default values may change the system behavior drastically so make
  # sure you know what you're doing! See the Scheduler section of the Akka
  # Documentation for more details.
  scheduler {
    # The LightArrayRevolverScheduler is used as the default scheduler in the
    # system. It does not execute the scheduled tasks on exact time, but on every
    # tick, it will run everything that is (over)due. You can increase or decrease
    # the accuracy of the execution timing by specifying smaller or larger tick
    # duration. If you are scheduling a lot of tasks you should consider increasing
    # the ticks per wheel.
    # Note that it might take up to 1 tick to stop the Timer, so setting the
    # tick-duration to a high value will make shutting down the actor system
    # take longer.
    tick-duration = 1ms

    # The timer uses a circular wheel of buckets to store the timer tasks.
    # This should be set such that the majority of scheduled timeouts (for high
    # scheduling frequency) will be shorter than one rotation of the wheel
    # (ticks-per-wheel * ticks-duration)
    # THIS MUST BE A POWER OF TWO!
    ticks-per-wheel = 1024

    # This setting selects the timer implementation which shall be loaded at
    # system start-up.
    # The class given here must implement the akka.actor.Scheduler interface
    # and offer a public constructor which takes three arguments:
    #  1) com.typesafe.config.Config
    #  2) akka.event.LoggingAdapter
    #  3) java.util.concurrent.ThreadFactory
    implementation = akka.actor.LightArrayRevolverScheduler

    # When shutting down the scheduler, there will typically be a thread which
    # needs to be stopped, and this timeout determines how long to wait for
    # that to happen. In case of timeout the shutdown of the actor system will
    # proceed without running possibly still enqueued tasks.
    shutdown-timeout = 5s
  }

}
